package com.revature.cachemoney.backend.beans.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import com.revature.cachemoney.backend.beans.models.Account;
import com.revature.cachemoney.backend.beans.models.Transaction;
import com.revature.cachemoney.backend.beans.models.User;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

@ExtendWith(SpringExtension.class)
@SpringBootTest
class AccountServiceTest {
    @Autowired
    private AccountService accountService;
    @Autowired
    private UserService userService;
    @Autowired
    private TransactionService transactionService;

    private User tempUser;

    private List<Account> validAccounts;

    @BeforeEach
    void populateDBWithUserandAccounts() {
        if (userService.getAllUsers().size() != 0) {
            if (accountService.getAllAccounts().size() != 0) {
                accountService.deleteAllAccounts();
            }
            userService.deleteAllUsers();
        }
        tempUser = new User("Hank", "Hill", "hankaccounthill@gmail.com", "abcd1234", "accounttest");
        userService.postUser(tempUser);

        // Create accounts (They dont currently have a valid user model under attribute "userId")
        Account checkingAcc = new Account("checking");
        Account savingsAcc = new Account("savings");
        Account checkingAccWithNickname = new Account("checking", "secret account");

        //populate userId with a user that exists in database

        checkingAcc.setUser(tempUser);
        savingsAcc.setUser(tempUser);
        checkingAccWithNickname.setUser(tempUser);

        // add accounts to list.
        validAccounts = new LinkedList<>();
        validAccounts.add(checkingAcc);
        validAccounts.add(savingsAcc);
        validAccounts.add(checkingAccWithNickname);

        // persist accounts to database
        for (Account validAcc : validAccounts) {
            accountService.postAccount(validAcc, validAcc.getUser().getUserId());
        }
    }

    @AfterEach
    void deleteDBData() {
        if (transactionService.getAllTransactions().size() != 0){
            transactionService.deleteAllTransactions();
        }
        //accountService.deleteAllAccounts();
        if (accountService.getAllAccounts().size() != 0){
            accountService.deleteAllAccounts();
        }
        userService.deleteAllUsers();

        // must be set to null because after models are persisted
        // these variables will now contain an ID value that was
        // generated by the database.

        validAccounts = null;
        tempUser = null;

    }


    @Test
    void getAllAccounts() {
        assertEquals(3, accountService.getAllAccounts().size());
    }

    @Test
    void getAccountByID() {

        List<Account> accountListFromDB = accountService.getAllAccounts();

        for (Account currAcc : accountListFromDB) {

            assertTrue(accountService.getAccountByID(currAcc.getAccountId(),
                    currAcc.getUser().getUserId()).isPresent());
        }

        assertFalse(accountService.getAccountByID(0, 1).isPresent());

    }


    @Test
    void deleteAccountById() {
        List<Account> accountListFromDB = accountService.getAllAccounts();

        for (Account currAcc : accountListFromDB){

            assertTrue(accountService.deleteAccountById(currAcc.getAccountId(), currAcc.getUser().getUserId()));
        }

        assertFalse(accountService.deleteAccountById(0, 1));

        }


    @Test
    void getTransactionsById() {
        // NOTE: THE DATE VALUE BEFORE THE TRANSACTION IS PERSISTED IS DIFFERENT
        //      FROM WHAT YOU GET FROM THE DATABASE. THIS IS WHY "toStringWithoutDate"
        //      WAS CREATED. AS OF 3/13/2022, THE DATES MATCH BUT ARE FORMATTED DIFFERENTLY.

        Date date = new Date();

        List<Transaction> transactions = new LinkedList<>();
        transactions.add(new Transaction(validAccounts.get(0),
                "my first transaction", date, 12.50, 12.50));
        accountService.depositToAccount(tempUser.getUserId(), transactions.get(0));

        transactions.get(0).getAccount().setBalance(12.50);

        assertEquals(transactions.get(0).toStringWithoutDate(), accountService.getTransactionsById(validAccounts.get(0).getAccountId(),
                validAccounts.get(0).getUser().getUserId()).get(0).toStringWithoutDate());
        transactionService.deleteAllTransactions();

    }

    // account used for the following test is the first account in the validAccounts list.
    @Test
    void withdrawFromAccount() {
        // check to see if you can withdraw from an account with balance 0.
        // NOTE: ONLY POSITIVE VALUES IN TRANSACTION_AMOUNT ARGUMENT.
        Transaction withdrawal = new Transaction(validAccounts.get(0),
                "withdrawal after my initial deposit", new Date(), 10.50, 2.50);

        // we assert that this should fail since we dont have sufficient funds.
        assertFalse(accountService.withdrawFromAccount(tempUser.getUserId(), withdrawal));

        // check to see if a withdrawal can be made with an account that has sufficient funds.
        // first we add funds since all accounts created start off with $0.00 in their account
        Transaction initialDeposit = new Transaction(validAccounts.get(0),
                "initial deposit to account", new Date(), 12.50, 12.50);
        accountService.depositToAccount(tempUser.getUserId(), initialDeposit);

        // We retrieve the account from the database and set it equal to the first element in the
        // validAccount list with a check to make sure that the account is actually present.
        if (accountService.getAccountByID(validAccounts.get(0).getAccountId(), tempUser.getUserId()).isPresent()) {
            validAccounts.set(
                    0,
                    accountService.getAccountByID(
                            validAccounts.get(0).getAccountId(),
                            tempUser.getUserId()).get());
        }

        // we update the withdrawal transaction to hold the new state of our account
        // which was retrieved from the database.
        withdrawal.setAccount(validAccounts.get(0));

        // we assert that this transaction should pass since account, funds, and
        assertTrue(accountService.withdrawFromAccount(tempUser.getUserId(), withdrawal));


    }

    // note all accounts in validAccounts are tied to 1 user.
    @Test
    void transferBetweenAccountsOfOneUser() {
        // test for valid transaction between 2 accounts owned by the same user.
        // we will be using the first 2 accounts in the validAccounts list.

        // create transaction to add funds to an account
        // since they are initialized with $0.00 funds.
        Transaction initialDeposit = new Transaction(validAccounts.get(0),
                "initial deposit to account", new Date(), 12.50, 12.50);
        // add funds to account.
        accountService.depositToAccount(tempUser.getUserId(), initialDeposit);

        //positive transfer amount to be made.
        Transaction transferAmount = new Transaction(validAccounts.get(0),
                "initial deposit to account", new Date(), 12.50, 12.50);

        // Actual test to check if transfer was successful
        assertTrue(accountService.transferBetweenAccountsOfOneUser(
                tempUser.getUserId(),
                validAccounts.get(0).getAccountId(),
                validAccounts.get(1).getAccountId(),
                transferAmount));

        // test for cases where there are insufficient funds in the source account.

    }

    @Test
    void sendToAccountOfDifferentUser() {
        // will not test until other functionality that is part of MVP
        // is tested. As of 3/12/2022, this is a stretch goal not fully implemented.

    }


    @Nested
    class TestPostAccount{
        @BeforeEach
        void populateDB(){
            if (userService.getAllUsers().size() != 0) {
                if (accountService.getAllAccounts().size() != 0){
                    accountService.deleteAllAccounts();
                }
                userService.deleteAllUsers();
                tempUser = new User("Hank", "Hill", "hankaccounthill@gmail.com", "abcd1234", "accounttest");
                userService.postUser(tempUser);
            }else{
                tempUser = new User("Hank", "Hill", "hankaccounthill@gmail.com", "abcd1234", "accounttest");
                userService.postUser(tempUser);
            }
            if (accountService.getAllAccounts().size() != 0){
                //accountService.deleteAllAccounts();
            }
        }

        @AfterEach
        void deleteDBData(){
            accountService.deleteAllAccounts();
            userService.deleteAllUsers();
            tempUser = null;

        }

        @Test
        void postAccount() {

            Account testChecking = new Account("checking");
            Account testIncorrectType = new Account("blahblah");

            testChecking.setUser(tempUser);
            testIncorrectType.setUser(tempUser);


            assertEquals(false, accountService.postAccount(testIncorrectType, tempUser.getUserId()));
            assertEquals(true, accountService.postAccount(testChecking, tempUser.getUserId()));
            // need to check for valid account but incorrect user id


        }


    }

}