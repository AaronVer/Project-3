package com.revature.cachemoney.backend.beans.security;

import java.util.Date;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * Utility for creating & validating JSON Web Tokens (JWTs).
 * 
 * @author Ibrahima Diallo, Brian Gardner, Cody Gonsowski, & Jeffrey Lor
 */
@Component
public class JwtUtil {
    // pull our secret from properties
    @Value(value = "${jwt_secret}")
    private String secret;

    /**
     * Generate JWT for user trying to create a token.
     * 
     * @param username associated with user trying to create token
     * @return JWT that contains verification information
     * @throws IllegalArgumentException
     * @throws JWTCreationException
     */
    public String generateToken(String username) throws IllegalArgumentException, JWTCreationException {
        return JWT.create()
                .withClaim("username", username)
                .withIssuedAt(new Date())
                //TODO fix with secret application.properties
                .sign(Algorithm.HMAC256("hniumae4vtihnuomyv5tabeuhniae5thnuiae4vyuihna4vhuia34h965o8q3y67"));
    }

    /**
     * Validates JWT.
     * 
     * @param token token generated by our generateToken() method
     * @return claim retrieved from submitted token
     * @throws JWTVerificationException
     */
    public String validateTokenAndRetrieveSubject(String token) throws JWTVerificationException {
        // create a verifier using the same algorithm as generated token
        //TODO fix with secret application.properties
        JWTVerifier verifier = JWT.require(Algorithm.HMAC256("hniumae4vtihnuomyv5tabeuhniae5thnuiae4vyuihna4vhuia34h965o8q3y67")).build();

        // decrypt the random garbage based on secret key
        DecodedJWT jwt = verifier.verify(token);

        // the information we want from the token
        return jwt.getClaim("username").asString();
    }
}
